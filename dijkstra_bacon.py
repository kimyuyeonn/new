import heapq

class Graph:
    def __init__(self):
        self.adj_list = {}

    def add_node(self, node):
        self.adj_list[node] = []

    def add_edge(self, node1, node2):
        self.adj_list[node1].append(node2)
        self.adj_list[node2].append(node1)

    def get_neighbors(self, node):
        return self.adj_list[node]

    def kevin_bacon_number(self):
        kevin_bacon_numbers = {}
        for node in self.adj_list:
            distances = dijkstra(self, node)
            total_distance = sum(distances.values())
            kevin_bacon_numbers[node] = total_distance
        return kevin_bacon_numbers

    def dijkstra(graph, start):
        distances = {node: float('inf') for node in graph.adj_list}
        distances[start] = 0
        pq = [(0, start)]  # 우선순위 큐
        visited = set()

        while pq:
            current_dist, current_node = heapq.heappop(pq)

            if current_node in visited:
                continue
            visited.add(current_node)

            for neighbor in graph.get_neighbors(current_node):
                distance = current_dist + 1  # 간선 가중치가 1이라고 가정
                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    heapq.heappush(pq, (distance, neighbor))

        return distances

import networkx as nx
import matplotlib.pyplot as plt

# 한글 폰트 사용
from matplotlib import font_manager, rc

# 폰트 경로
font_path = "C:/Windows/Fonts/08SeoulNamsanB.ttf"

# 폰트 이름 얻어오기
font_name = font_manager.FontProperties(fname=font_path).get_name()

# font 설정
rc('font', family=font_name)

# 학생 명단
students = [
    1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
    1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1201, 1202,
    1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
    1213, 1214, 1215, 1216, 1217, 1218, 1301, 1302, 1303, 1304,
    1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314,
    1315, 1316, 1317, 1318, 1319, 1401, 1402, 1403, 1404, 1405,
    1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415,
    1416, 1417, 1418, 1419
]


# 학생 간의 연결 관계
connections = [
    (1215, 1106),
    (1215, 1107),
    (1215, 1109),
    (1215, 1113),
    (1215, 1115),
    (1215, 1116),
    (1215, 1118),
    (1215, 1201),
    (1215, 1202),
    (1215, 1203),
    (1215, 1204),
    (1215, 1205),
    (1215, 1207),
    (1215, 1208),
    (1215, 1209),
    (1215, 1211),
    (1215, 1212),
    (1215, 1213),
    (1215, 1214),
    (1215, 1217),
    (1215, 1218),
    (1215, 1301),
    (1215, 1308),
    (1215, 1309),
    (1215, 1312),
    (1215, 1403),
    (1215, 1405),
    (1215, 1409),
    (1215, 1411),
    (1215, 1412),
    (1215, 1415),
    (1215, 1418),
    (1215, 1419),
    (1201, 1114),
    (1201, 1117),
    (1201, 1202),
    (1201, 1203),
    (1201, 1207),
    (1201, 1208),
    (1201, 1211),
    (1201, 1213),
    (1201, 1215),
    (1201, 1217),
    (1201, 1403),
    (1201, 1413),
    (1202, 1102),
    (1202, 1114),
    (1202, 1115),
    (1202, 1117),
    (1202, 1201),
    (1202, 1203),
    (1202, 1206),
    (1202, 1207),
    (1202, 1208),
    (1202, 1211),
    (1202, 1213),
    (1202, 1215),
    (1202, 1217),
    (1202, 1313),
    (1202, 1316),
    (1202, 1318),
    (1202, 1319),
    (1202, 1404),
    (1202, 1408),
    (1202, 1409),
    (1202, 1414),
    (1203, 1201),
    (1203, 1202),
    (1203, 1204),
    (1203, 1207),
    (1203, 1208),
    (1203, 1215),
    (1203, 1217),
    (1204, 1102),
    (1204, 1106),
    (1204, 1113),
    (1204, 1114),
    (1204, 1203),
    (1204, 1206),
    (1204, 1208),
    (1204, 1209),
    (1204, 1210),
    (1204, 1211),
    (1204, 1215),
    (1204, 1217),
    (1204, 1312),
    (1204, 1316),
    (1204, 1319),
    (1204, 1403),
    (1204, 1405),
    (1204, 1406),
    (1204, 1413),
    (1204, 1417),
    (1205, 1106),
    (1205, 1109),
    (1205, 1113),
    (1205, 1115),
    (1205, 1116),
    (1205, 1117),
    (1205, 1202),
    (1205, 1208),
    (1205, 1211),
    (1205, 1214),
    (1205, 1215),
    (1205, 1312),
    (1205, 1314),
    (1205, 1316),
    (1205, 1409),
    (1206, 1115),
    (1206, 1116),
    (1206, 1202),
    (1206, 1204),
    (1206, 1208),
    (1206, 1209),
    (1206, 1211),
    (1206, 1217),
    (1206, 1316),
    (1206, 1319),
    (1206, 1417),
    (1207, 1201),
    (1207, 1202),
    (1207, 1203),
    (1207, 1208),
    (1207, 1213),
    (1207, 1215),
    (1207, 1409),
    (1208, 1201),
    (1208, 1202),
    (1208, 1203),
    (1208, 1205),
    (1208, 1206),
    (1208, 1207),
    (1208, 1209),
    (1208, 1210),
    (1208, 1210),
    (1208, 1211),
    (1208, 1213),
    (1208, 1215),
    (1208, 1217),
    (1208, 1306),
    (1209, 1204),
    (1209, 1206),
    (1209, 1210),
    (1209, 1211),
    (1209, 1215),
    (1209, 1217),
    (1209, 1316),
    (1209, 1319),
    (1211, 1115),
    (1211, 1116),
    (1211, 1201),
    (1211, 1202),
    (1211, 1204),
    (1211, 1205),
    (1211, 1206),
    (1211, 1208),
    (1211, 1209),
    (1211, 1210),
    (1211, 1214),
    (1211, 1215),
    (1211, 1217),
    (1212, 1108),
    (1212, 1216),
    (1213, 1103),
    (1213, 1106),
    (1213, 1108),
    (1213, 1110),
    (1213, 1115),
    (1213, 1116),
    (1213, 1117),
    (1213, 1201),
    (1213, 1202),
    (1213, 1203),
    (1213, 1207),
    (1213, 1208),
    (1213, 1215),
    (1213, 1303),
    (1213, 1307),
    (1213, 1313),
    (1213, 1315),
    (1213, 1318),
    (1213, 1402),
    (1213, 1408),
    (1213, 1409),
    (1213, 1414),
    (1101, 1415),
    (1101, 1118),
    (1101, 1117),
    (1101, 1116),
    (1101, 1115),
    (1101, 1113),
    (1101, 1110),
    (1101, 1105),
    (1101, 1102),
    (1101, 1103),
    (1111, 1215),
    (1111, 1204),
    (1111, 1118),
    (1111, 1117),
    (1111, 1116),
    (1111, 1115),
    (1111, 1113),
    (1111, 1110),
    (1111, 1102),
    (1111, 1319),
    (1111, 1103),
    (1310, 1416),
    (1310, 1318),
    (1310, 1312),
    (1310, 1302),
    (1310, 1215),
    (1310, 1205),
    (1407, 1417),
    (1407, 1416),
    (1407, 1415),
    (1407, 1411),
    (1407, 1401),
    (1104, 1213),
    (1104, 1117),
    (1104, 1116),
    (1104, 1115),
    (1104, 1110),
    (1104, 1102),
    (1104, 1308),
    (1104, 1218),
    (1104, 1103),
    (1311, 1418),
    (1311, 1318),
    (1311, 1312),
    (1311, 1308),
    (1311, 1215),
    (1311, 1213),
    (1311, 1204),
    (1311, 1117),
    (1311, 1116),
    (1311, 1110),
    (1311, 1218),
    (1112, 1213),
    (1112, 1117),
    (1305, 1115),
    (1305, 1302),
    (1305, 1312),
    (1305, 1318),
    (1305, 1405),
    (1304, 1414),
    (1304, 1318),
    (1105, 1215),
    (1105, 1118),
    (1105, 1117),
    (1105, 1116),
    (1105, 1115),
    (1105, 1113),
    (1105, 1110),
    (1105, 1109),
    (1105, 1102),
    (1105, 1103),
    (1105, 1218),
    (1416, 1210),
    (1416, 1215),
    (1416, 1216),
    (1416, 1308),
    (1416, 1309),
    (1416, 1310),
    (1416, 1418),
    (1416, 1417),
    (1416, 1415),
    (1416, 1413),
    (1416, 1411),
    (1416, 1410),
    (1416, 1405),
    (1416, 1404),
    (1416, 1401),
    (1317, 1414),

]


# 입력된 학번
start_node = int(input("기준 학번을 입력하세요: "))

# 그래프 생성
G = Graph()

# 학번을 노드로 추가
for student in students:
    G.add_node(student)

# 학생 간의 연결을 엣지로 추가
for connection in connections:
    G.add_edge(connection[0], connection[1])

# 다익스트라 알고리즘을 사용하여 케빈 베이컨 수 계산
distances = G.dijkstra(start_node)

average=0
sum=0
sum_list=[]

# 입력된 학번을 기준으로 다른 학생들의 케빈 베이컨 수 출력
print(f"{start_node} 학번을 기준으로 다른 학생들의 케빈 베이컨 수:")
for student, distance in distances.items():
    if student != start_node:
        print(f"{student}: {distance}")
        sum_list.append(distance)
        sum=sum+distance
average=sum/74
print(f"1:{sum_list.count(1)}")
print(f"2:{sum_list.count(2)}")
print(f"3:{sum_list.count(3)}")
print(average)

